name: fucking Firmware Dumper

on:
  workflow_dispatch:
    inputs:
      GITHUB_USER:
        description: "GitHub Username"
        required: true
        default: "Gtajisan"
      GITHUB_EMAIL:
        description: "GitHub Email"
        required: true
        default: "ffjisan804@gmail.com"
      FIRMWARE_URL:
        description: "Stock ROM Link"
        required: true
      UPLOAD_LINEAGE_DT:
        description: "Upload LineageOS tree"
        required: true
        default: false
        type: boolean
      UPLOAD_TWRP_DT:
        description: "Upload TWRP tree"
        required: true
        default: false
        type: boolean
      GENERATE_VENDOR:
        description: "Create Vendor Tree"
        required: true
        default: false
        type: boolean

jobs:
  dumper:
    name: Dump Firmware and Upload
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GTOKEN }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install Requirements
        run: |
          sudo apt update && sudo apt install -y git curl aria2 cpio neofetch tar gzip
          pip3 install aospdtgen twrpdtgen

      - name: Create Script
        run: |
          mkdir -p firmware-dumper
          cat <<EOF > firmware-dumper/main.py
          import os
          import subprocess
          import shutil
          import datetime
          import gzip
          from pathlib import Path

          GITHUB_USER = os.getenv("GITHUB_USER")
          GITHUB_EMAIL = os.getenv("GITHUB_EMAIL")
          GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

          FIRMWARE_URL = os.getenv("FIRMWARE_URL")
          UPLOAD_LINEAGE_DT = os.getenv("UPLOAD_LINEAGE_DT", "false").lower() == "true"
          UPLOAD_TWRP_DT = os.getenv("UPLOAD_TWRP_DT", "false").lower() == "true"
          GENERATE_VENDOR = os.getenv("GENERATE_VENDOR", "false").lower() == "true"

          WORKDIR = Path("/home/runner/work/dump")
          DUMPRX_DIR = WORKDIR / "DumprX"
          OUT_DIR = DUMPRX_DIR / "out"

          def run(cmd, cwd=None):
              print(f"Running: {cmd}")
              result = subprocess.run(cmd, shell=True, cwd=cwd, check=True)
              return result

          def setup():
              WORKDIR.mkdir(parents=True, exist_ok=True)
              os.chdir(WORKDIR)
              run("git clone https://github.com/DumprX/DumprX")
              os.chdir(DUMPRX_DIR)
              run("bash setup.sh")
              for sh in DUMPRX_DIR.glob("*.sh"):
                  sh.chmod(0o777)
              run(f"sudo bash dumper.sh {FIRMWARE_URL}")
              run("chmod -R 777 out")

          def grep_prop(keys):
              for key in keys:
                  for build_prop in OUT_DIR.rglob("build.prop"):
                      with build_prop.open() as f:
                          for line in f:
                              if key in line:
                                  return line.strip().split("=")[-1]
              return ""

          def extract_info():
              codename = grep_prop(["ro.product.vendor.device", "ro.vendor.product.device", "ro.product.device"]).strip()
              brand = grep_prop(["ro.product.vendor.brand", "ro.vendor.product.brand", "ro.product.brand"]).lower().strip()
              version = grep_prop(["ro.build.version.release_or_codename"])
              return codename, brand, version

          def compress_images():
              max_size = 48000000
              for image in ["recovery.img", "boot.img", "vendor_boot.img", "init_boot.img", "dtbo.img", "dtb.img"]:
                  path = OUT_DIR / image
                  if path.exists() and path.stat().st_size > max_size:
                      with open(path, 'rb') as f_in, gzip.open(str(path) + ".gz", 'wb') as f_out:
                          shutil.copyfileobj(f_in, f_out)
                      path.unlink()
              for f in OUT_DIR.rglob("*"):
                  if f.stat().st_size > 50 * 1024 * 1024:
                      print("Deleted:", f)
                      f.unlink()

          def push(repo_name, path, desc):
              os.chdir(path)
              run("git init")
              run(f"git config user.name '{GITHUB_USER}'")
              run(f"git config user.email '{GITHUB_EMAIL}'")
              run("git add .")
              run(f"git commit -m '{desc}'")
              try:
                  run(f"gh repo view {repo_name}")
                  run(f"git remote add origin https://github.com/{GITHUB_USER}/{repo_name}.git")
              except:
                  run(f"gh repo create {repo_name} --public --description='{desc}' --source=. --remote=origin")
              run("git push -u origin HEAD")

          def main():
              setup()
              codename, brand, version = extract_info()
              compress_images()
              datestamp = datetime.datetime.now().strftime("%Y%m%d")
              push(f"dump_{brand}_{codename}", OUT_DIR, f"Dump for {brand} {codename}")
              if UPLOAD_LINEAGE_DT:
                  path = WORKDIR / "lineage-device-tree"
                  if path.exists():
                      push(f"lineage_device_{brand}_{codename}", path, f"LineageOS tree for {codename}")
              if UPLOAD_TWRP_DT:
                  path = WORKDIR / f"twrp-device-tree/{brand}/{codename}"
                  if path.exists():
                      push(f"twrp_device_{brand}_{codename}", path, f"TWRP tree for {codename}")

          if __name__ == "__main__":
              main()
          EOF

      - name: Run Python Dumper
        env:
          GITHUB_USER: ${{ inputs.GITHUB_USER }}
          GITHUB_EMAIL: ${{ inputs.GITHUB_EMAIL }}
          GITHUB_TOKEN: ${{ secrets.GTOKEN }}
          FIRMWARE_URL: ${{ inputs.FIRMWARE_URL }}
          UPLOAD_LINEAGE_DT: ${{ inputs.UPLOAD_LINEAGE_DT }}
          UPLOAD_TWRP_DT: ${{ inputs.UPLOAD_TWRP_DT }}
          GENERATE_VENDOR: ${{ inputs.GENERATE_VENDOR }}
        run: python3 firmware-dumper/main.py
        
